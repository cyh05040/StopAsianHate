"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultLayout = exports.layoutDefaultProps = exports.layoutPropTypes = void 0;
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
exports.layoutPropTypes = {
    closeButtonCaption: prop_types_1.default.string,
    shareButtonCaption: prop_types_1.default.string,
    toggleFullscreenButtonCaption: prop_types_1.default.string,
    zoomButtonCaption: prop_types_1.default.string,
    prevButtonCaption: prop_types_1.default.string,
    nextButtonCaption: prop_types_1.default.string,
    shareButton: prop_types_1.default.bool,
    fullscreenButton: prop_types_1.default.bool,
    zoomButton: prop_types_1.default.bool,
};
exports.layoutDefaultProps = {
    closeButtonCaption: 'Close (Esc)',
    shareButtonCaption: 'Share',
    toggleFullscreenButtonCaption: 'Toggle fullscreen',
    zoomButtonCaption: 'Zoom in/out',
    prevButtonCaption: 'Previous (arrow left)',
    nextButtonCaption: 'Next (arrow right)',
    shareButton: true,
    fullscreenButton: true,
    zoomButton: true,
};
/**
 * Default PhotoSwipe layout
 */
exports.DefaultLayout = react_1.default.forwardRef(function (_a, ref) {
    var closeButtonCaption = _a.closeButtonCaption, shareButtonCaption = _a.shareButtonCaption, toggleFullscreenButtonCaption = _a.toggleFullscreenButtonCaption, zoomButtonCaption = _a.zoomButtonCaption, prevButtonCaption = _a.prevButtonCaption, nextButtonCaption = _a.nextButtonCaption, shareButton = _a.shareButton, fullscreenButton = _a.fullscreenButton, zoomButton = _a.zoomButton, rest = __rest(_a, ["closeButtonCaption", "shareButtonCaption", "toggleFullscreenButtonCaption", "zoomButtonCaption", "prevButtonCaption", "nextButtonCaption", "shareButton", "fullscreenButton", "zoomButton"]);
    return (react_1.default.createElement("div", __assign({ className: "pswp", tabIndex: -1, role: "dialog", "aria-hidden": "true" }, rest, { ref: ref }),
        react_1.default.createElement("div", { className: "pswp__bg" }),
        react_1.default.createElement("div", { className: "pswp__scroll-wrap" },
            react_1.default.createElement("div", { className: "pswp__container" },
                react_1.default.createElement("div", { className: "pswp__item" }),
                react_1.default.createElement("div", { className: "pswp__item" }),
                react_1.default.createElement("div", { className: "pswp__item" })),
            react_1.default.createElement("div", { className: "pswp__ui pswp__ui--hidden" },
                react_1.default.createElement("div", { className: "pswp__top-bar" },
                    react_1.default.createElement("div", { className: "pswp__counter" }),
                    react_1.default.createElement("button", { type: "button", className: "pswp__button pswp__button--close", title: closeButtonCaption }),
                    shareButton && (react_1.default.createElement("button", { type: "button", className: "pswp__button pswp__button--share", title: shareButtonCaption })),
                    fullscreenButton && (react_1.default.createElement("button", { type: "button", className: "pswp__button pswp__button--fs", title: toggleFullscreenButtonCaption })),
                    zoomButton && (react_1.default.createElement("button", { type: "button", className: "pswp__button pswp__button--zoom", title: zoomButtonCaption })),
                    react_1.default.createElement("div", { className: "pswp__preloader" },
                        react_1.default.createElement("div", { className: "pswp__preloader__icn" },
                            react_1.default.createElement("div", { className: "pswp__preloader__cut" },
                                react_1.default.createElement("div", { className: "pswp__preloader__donut" }))))),
                react_1.default.createElement("div", { className: "pswp__share-modal pswp__share-modal--hidden pswp__single-tap" },
                    react_1.default.createElement("div", { className: "pswp__share-tooltip" })),
                react_1.default.createElement("button", { type: "button", className: "pswp__button pswp__button--arrow--left", title: prevButtonCaption }),
                react_1.default.createElement("button", { type: "button", className: "pswp__button pswp__button--arrow--right", title: nextButtonCaption }),
                react_1.default.createElement("div", { className: "pswp__caption" },
                    react_1.default.createElement("div", { className: "pswp__caption__center" }))))));
});
exports.DefaultLayout.propTypes = exports.layoutPropTypes;
exports.DefaultLayout.defaultProps = exports.layoutDefaultProps;
//# sourceMappingURL=photoswipe-layout.js.map